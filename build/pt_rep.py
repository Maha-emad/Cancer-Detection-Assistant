
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path


# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter.ttk import Treeview
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore
from tkinter import *
import json
import os
from tkinter import filedialog
import aspose.pdf as ap


#OUTPUT_PATH = Path(__file__).parent
#ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\user\Desktop\figmas\build\build\assets\pt_rep_imgs")

OUTPUT_PATH = Path('<output_path>')
ASSETS_PATH = Path(r"C:\Users\user\Desktop\figmas\build\build\assets\pt_rep_imgs")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def fetch_report():
    
    with open('patient_id.json','r') as file:
        data = json.load(file)
    
    cred = credentials.Certificate('firebase\cancerdetection-8f9e0-firebase-adminsdk-iqsdf-23750ab0b9.json')
    
    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)
    
    db = firestore.client()
    
    reports_ref = db.collection('reports')
    
    query = reports_ref.where('P_id', '==', int(data['patient_id'])).get()

    if len(query) != 0:
        table.delete(*table.get_children())  # Clear existing table rows

        for doc in query:
            report_data = doc.to_dict()
            table.insert('', 'end', values=(report_data['rep_no']))
    else:
        table.delete(*table.get_children())
        table.insert('', 'end', values=("No report found.", "", ""))

        
def show_report():
    
    patient_id = patient_id_entry.get()
    report_no = rep_no_entry.get()
    
    cred = credentials.Certificate('firebase\cancerdetection-8f9e0-firebase-adminsdk-iqsdf-23750ab0b9.json')
    
    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)
    
    db = firestore.client()
    reports_ref = db.collection('reports')
    
    query = reports_ref.where('P_id', '==', int(patient_id)).where('rep_no', '==', int(report_no)).get()
    if len(query) != 0:
        for doc in query:
            data = doc.to_dict()
            p_id = data['P_id']
            name = data['Name']
            gender = data['Gender']
            phone = data['Phone']
            report = data['report']
            
            document = ap.Document()

            # Add page
            page = document.pages.add()

            # Initialize textfragment object
            text_fragment = ap.text.TextFragment(f"Name: {name}\nID: {p_id}\n\nGender: {gender}\nphone: {phone}\n")
            # Add text fragment to new page
            page.paragraphs.add(text_fragment)
            
            text_fragment = ap.text.TextFragment(report)
            
            page.paragraphs.add(text_fragment)
            
            file_path = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF Files", "*.pdf")],
            title="Save PDF")

            # Save updated PDF
            document.save(file_path)
            os.startfile("report.pdf")
    else:
        table.delete(*table.get_children())
        table.insert('', 'end', values=("No report with the given ID found.", "", ""))

        
        
cred = credentials.Certificate('firebase\cancerdetection-8f9e0-firebase-adminsdk-iqsdf-23750ab0b9.json')
    
if not firebase_admin._apps:
    firebase_admin.initialize_app(cred)
    
db = firestore.client()

window = Tk()

window.geometry("1530x790")
window.configure(bg = "#051747")


canvas = Canvas(
    window,
    bg = "#051747",
    height = 790,
    width = 1530,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    765.0,
    395.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    930.0,
    473.0,
    image=image_image_2
)

rep_no_entry_image = PhotoImage(
    file=relative_to_assets("entry_1.png"))
rep_no_entry_bg = canvas.create_image(
    197.0,
    231.5,
    image=rep_no_entry_image
)
rep_no_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
rep_no_entry.place(
    x=80.5,
    y=207.0,
    width=233.0,
    height=47.0
)

patient_id_entry_image = PhotoImage(
    file=relative_to_assets("entry_2.png"))
patient_id_entry_bg = canvas.create_image(
    197.0,
    370.5,
    image=patient_id_entry_image
)
patient_id_entry = Entry(
    bd=0,
    bg="#D9D9D9",
    fg="#000716",
    highlightthickness=0
)
patient_id_entry.place(
    x=80.5,
    y=346.0,
    width=233.0,
    height=47.0
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_1 clicked"),
    relief="flat"
)
button_1.place(
    x=1278.0,
    y=48.0,
    width=140.0,
    height=48.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=1278.0,
    y=114.0,
    width=140.0,
    height=48.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: show_report(),
    relief="flat"
)
button_3.place(
    x=97.0,
    y=453.0,
    width=169.0,
    height=53.0
)

table = Treeview(window, columns=('Number'), show = 'headings')
table.place(x=604, y=274, width=870, height=356)

table.heading('Number', text='Number')


fetch_report()



window.resizable(True, True)
window.mainloop()
